(function(){"use strict";var __webpack_modules__={771:function(){eval('\n;// CONCATENATED MODULE: ./src/ui/drawField.ts\nconst drawField = (element, field, handleClickOnCell) => {\n  const rowIterator = (row, rowIndex) => {\n    return `<tr class="table__row row">${row.map((cell, columnIndex) => {\n      if (cell === 1) {\n        return `<td \n         data-x=${columnIndex}\n         data-y=${rowIndex}\n         class="row__cell row__cell_type_alive"></td>`;\n      } else if (cell === -1) {\n        return `<td \n       data-x=${columnIndex}\n       data-y=${rowIndex}\n       class="row__cell row__cell_type_doomed" ></td>`;\n      }\n      return `<td \n       data-x=${columnIndex}\n       data-y=${rowIndex}\n       class="row__cell row__cell_type_dead" ></td>`;\n    }).join("")}</tr>`;\n  };\n  const tableString = `<table class="field__table table">${field.map(rowIterator).join("")}</table>`;\n  element.innerHTML = `${tableString}`;\n  const table = element.querySelector("table");\n  table.addEventListener("click", e => {\n    const target = e.target;\n    if (target.tagName === "TD") {\n      const x = target.getAttribute("data-x");\n      const y = target.getAttribute("data-y");\n      if (x && y && Number(x) >= 0 && Number(y) >= 0) {\n        handleClickOnCell(Number(x), Number(y));\n      }\n    }\n  });\n};\n\n;// CONCATENATED MODULE: ./src/logic/isAnyoneAlive.ts\n// Проверить - "Есть кто живой?".\nconst isAnyoneAlive = field => {\n  for (let i = 0; i < field.length; i += 1) {\n    const row = field[i];\n    for (let j = 0; j < row.length; j += 1) {\n      const cell = row[j];\n      if (cell) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n;// CONCATENATED MODULE: ./src/logic/getCellState.ts\n// Получить текущее состояние ячейки.\nconst getCellState = (field, x, y) => {\n  const row = field[y];\n  if (row === undefined) {\n    return 0;\n  }\n  const cell = row[x];\n  if (cell === undefined) {\n    return 0;\n  }\n  if (cell === -1) {\n    return 1;\n  }\n  return cell;\n};\n\n;// CONCATENATED MODULE: ./src/logic/getNumOfAliveNeighbours.ts\n\n// Получить количество соседей для ячейки.\nconst getNumOfAliveNeighbours = (column, row, field) => {\n  let neighbours = 0;\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row - 1));\n  }\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row + 1));\n  }\n  neighbours += Number(getCellState(field, column - 1, row));\n  neighbours += Number(getCellState(field, column + 1, row));\n  return neighbours;\n};\n\n;// CONCATENATED MODULE: ./src/logic/getNewCellState.ts\n// Получить текущее новое состояние ячейки.\nconst getNewCellState = (currentCellState, countOfAliveNeighbours) => {\n  if (countOfAliveNeighbours === 3) {\n    return 1;\n  }\n  if (countOfAliveNeighbours > 3 || countOfAliveNeighbours < 2) {\n    return 0;\n  }\n  if (countOfAliveNeighbours === 2 && currentCellState === 1) {\n    return 1;\n  }\n  return 0;\n};\n\n;// CONCATENATED MODULE: ./src/logic/getNextState.ts\n\n\n\n// Получить следующее состояние поля.\nconst getNextState = (field, check = false) => {\n  let nextState = field.map((row, rowIndex) => row.map((cell, columnIndex) => {\n    const count = getNumOfAliveNeighbours(columnIndex, rowIndex, field);\n    const currentState = getCellState(field, columnIndex, rowIndex);\n    const newState = getNewCellState(currentState, count);\n    return newState;\n  }));\n  if (check) {\n    return nextState;\n  }\n\n  // Получить будущее состояние поля для того, чтобы узнать кто умрёт.\n  const futureState = getNextState(nextState, true);\n  nextState = nextState.map((row, x) => row.map((cell, y) => {\n    if (nextState[x][y] === 1 && futureState[x][y] === 0) {\n      return -1;\n    }\n    return cell;\n  }));\n  return nextState;\n};\n\n;// CONCATENATED MODULE: ./src/ui/createGame.ts\n\n\n\n// Создание поля игры и прикрепление обработчиков.\nconst createGame = (width, height, element) => {\n  let gameIsUpRunning = false;\n  let timer;\n\n  // Добавление обработчика событий, для изменения скорости игры.\n  const range = element.querySelector(".section__range");\n  let delay = Number(range.value);\n  range.addEventListener("input", () => {\n    delay = Number(range.value);\n    if (buttonStart.innerHTML === "Остановить игру") {\n      buttonStart.click();\n      buttonStart.click();\n    }\n  });\n\n  // Остановка игры.\n  const stopGame = () => {\n    gameIsUpRunning = false;\n    buttonStart.innerHTML = "Начать игру";\n    clearInterval(timer);\n  };\n\n  // Запуск игры.\n  const startGame = () => {\n    gameIsUpRunning = true;\n    buttonStart.innerHTML = "Остановить игру";\n    timer = setInterval(() => {\n      field = getNextState(field);\n      drawField(gameField, field, handleClickOnCell);\n      if (!isAnyoneAlive(field)) {\n        stopGame();\n        const gameMessage = element.querySelector(".game__message");\n        gameMessage.style.opacity = "1";\n        setTimeout(() => {\n          gameMessage.style.opacity = "0";\n        }, 3000);\n      }\n    }, delay);\n  };\n\n  // Функция обработки нажатия на кнопку Start/Stop.\n  const handlerClickButtonStart = () => {\n    if (!gameIsUpRunning) {\n      startGame();\n    } else {\n      stopGame();\n    }\n  };\n  const gameField = element.querySelector(".game__field");\n  const buttonStart = element.querySelector(".game__button_type_start-stop");\n\n  // Создание поля.\n  let field = Array.from({\n    length: height\n  }).map(() => Array.from({\n    length: width\n  }).fill(0));\n\n  // Функция для обработки нажатия на ячейку поля.\n  const handleClickOnCell = (x, y) => {\n    field[y][x] = field[y][x] === 0 ? 1 : 0;\n    drawField(gameField, field, handleClickOnCell);\n  };\n\n  // Функция для обработки изменения размеров поля.\n  const changeSizesField = () => {\n    const newWidth = element.querySelector("[data-width]");\n    const newHeight = element.querySelector("[data-height]");\n    if (!newWidth.value || !newHeight.value || Number(newWidth.value) < 1 || Number(newWidth.value) > 30 || Number(newHeight.value) < 1 || Number(newHeight.value) > 30) {\n      const errorMessage = element.querySelector(".section__error-message");\n      errorMessage.style.opacity = "1";\n      setTimeout(() => {\n        errorMessage.style.opacity = "0";\n      }, 3000);\n    } else {\n      const valueWidth = Number(newWidth.value);\n      const valueHeight = Number(newHeight.value);\n      const newield = Array.from({\n        length: valueHeight\n      }).map(() => Array.from({\n        length: valueWidth\n      }).fill(0));\n      field = newield.map((row, x) => row.map((cell, y) => {\n        if (field?.[x]?.[y] && field[x][y] === 1) {\n          return 1;\n        } else if (field?.[x]?.[y] && field[x][y] === -1) {\n          return -1;\n        }\n        return 0;\n      }));\n      if (buttonStart.innerHTML === "Начать игру") {\n        drawField(gameField, field, handleClickOnCell);\n      }\n      newWidth.value = "";\n      newHeight.value = "";\n    }\n  };\n  const buttonCreateField = element.querySelector(".section__button_type_create-field");\n  buttonCreateField.addEventListener("click", changeSizesField);\n  drawField(gameField, field, handleClickOnCell);\n  buttonStart.addEventListener("click", handlerClickButtonStart);\n};\n\n;// CONCATENATED MODULE: ./src/ui/createTerms.ts\n\n\n// Создание и добавление условий для экземпляра игры.\nconst createTerms = (element, wrapper) => {\n  const ordinal = element.getAttribute("data-ordinal");\n  element.innerHTML = `${Number(ordinal) !== 1 ? "<hr/>" : ""}<h3 class="section__term">Введите размеры поля (размеры поля ограничены от 1 до 30)</h3>\n  <table>\n  <tr>\n  <td><label>Ширина - </label></td>\n  <td><input type="number" class="section__coord" data-width step="1" min="1" max="30"/></td>\n  </tr>\n  <tr>\n  <td><label>Высота - </label></td>\n  <td><input type="number" class="section__coord" data-height step="1" min="1" max="30"/></td>\n  </tr>\n  </table>\n   \n   <p class="section__error-message">Введены некорректные значения</p>\n   <h3 class="section__term">Вы можете изменить скорость игры</h3>\n   <input class="section__range" type="range" min="100" max="2000" value="1000" step="100" list="values"/>\n   <datalist id="values" class="section__datalist" >\n   <option value="100" label="100 (мс)"></option>\n   <option value="500" label="500 (мс)"></option>\n   <option value="1000" label="1000 (мс)"></option>\n   <option value="1500" label="1500 (мс)"></option>\n   <option value="2000" label="2000 (мс)"></option>\n   </datalist>\n   ${Number(ordinal) !== 1 ? `<button class="section__button_type_remove-game _button">Удалить данный экземпляр игры</button>` : `<button class="section__button_type_add-new-game _button">Добавить новую игру</button>`}    \n   <br/><button class="section__button_type_create-field _button">Создать поле</button>\n   <button class="game__button_type_start-stop _button">Начать игру</button><br/><span class="game__message">Игра окончена!</span>   \n   <div class="section__game game">\n   <div class="game__field field"></div>\n   </div>`;\n\n  // Добавление обработчика событий на кнопку создания поля.\n  const buttonCreateField = element.querySelector(".section__button_type_create-field");\n  const createField = () => {\n    const width = element.querySelector("[data-width]");\n    const height = element.querySelector("[data-height]");\n    if (!width.value || !height.value || Number(width.value) < 1 || Number(width.value) > 30 || Number(height.value) < 1 || Number(height.value) > 30) {\n      const errorMessage = element.querySelector(".section__error-message");\n      errorMessage.style.opacity = "1";\n      setTimeout(() => {\n        errorMessage.style.opacity = "0";\n      }, 3000);\n    } else {\n      const buttonStart = element.querySelector(".game__button_type_start-stop");\n      if (buttonStart) {\n        buttonStart.style.opacity = "1";\n      }\n      createGame(Number(width.value), Number(height.value), element);\n      if (buttonCreateField) {\n        buttonCreateField.innerHTML = "Изменить размеры поля";\n        buttonCreateField.removeEventListener("click", createField);\n      }\n      width.value = "";\n      height.value = "";\n    }\n  };\n  if (buttonCreateField) {\n    buttonCreateField.addEventListener("click", createField);\n  }\n\n  // Добавление обработчика событий на кнопку добавления нового экземпляра игры.\n  const buttonAddNewGame = element.querySelector(".section__button_type_add-new-game");\n  if (buttonAddNewGame) {\n    buttonAddNewGame.addEventListener("click", () => {\n      createUI(wrapper);\n    });\n  }\n\n  // Добавление обработчика событий на кнопку удаления экземпляра игры.\n  const buttonRemoveGame = element.querySelector(".section__button_type_remove-game");\n  if (buttonRemoveGame) {\n    buttonRemoveGame.addEventListener("click", () => {\n      element.remove();\n    });\n  }\n};\n\n;// CONCATENATED MODULE: ./src/ui/createUI.ts\n\n// Создание и добавление экземпляра игры.\nconst createUI = element => {\n  const sections = element.querySelectorAll("section");\n  const section = document.createElement("section");\n  section.classList.add(`wrapper__section`);\n  section.classList.add(`section`);\n  section.classList.add(`wrapper__section_ordinal_${sections.length + 1}`);\n  section.setAttribute("data-ordinal", `${sections.length + 1}`);\n  element.insertAdjacentElement("beforeend", section);\n  createTerms(section, element);\n};\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\nconst app = document.getElementById("app");\nif (app) {\n  createUI(app);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///771\n')}},__webpack_exports__={};__webpack_modules__[771]()})();